    <!-- Bootstrap stuff -->
    <link rel="stylesheet" href="https://2e2d2a55.ngrok.io/components/bootstrap/dist/css/bootstrap.min.css">
    <script src="https://2e2d2a55.ngrok.io/components/jquery/dist/jquery.min.js"></script>
    <script src="https://2e2d2a55.ngrok.io/components/bootstrap/dist/js/bootstrap.min.js"></script>

    <!-- xcomponent stuff -->
    <script src="https://2e2d2a55.ngrok.io/components/xcomponent/dist/xcomponent.js"></script>
    <script src="https://2e2d2a55.ngrok.io/js/button/component.js"></script>
    <script src="https://2e2d2a55.ngrok.io/js/lightbox/component.js"></script>

    <script>
        console.log('************* lightbox *****************');
        console.log(window.xchild);
        console.log('****************************************');
    </script>


    <style>
        #paypal-button {
            width: 100%;
        }
        #apple-pay-button {
            display: none;
            background-color: black;
            background-image: -webkit-named-image(apple-pay-logo-white);
            background-size: 100% 100%;
            background-origin: content-box;
            background-repeat: no-repeat;
            width: 100%;
            height: 44px;
            padding: 10px 0;
            border-radius: 10px;
        }
    </style>

    <div class="well well-lg">
        
        <h2 class="form-heading">My form</h2>

        <!-- PayPal -->
        <div class="row">
        <div class="col-md-12">
            <div id="paypal-button"></div>
            <script src="https://www.paypalobjects.com/api/checkout.js"></script>
            <script>

                paypal.Button.render({

                    style: {
                        size: 'responsive',
                        color: 'gold',
                        shape: 'pill'
                    },

                    commit: true, // Optional: show a 'Pay Now' button in the checkout flow

                    env: 'sandbox', // Specify 'sandbox' for the test environment

                    client: {
                        sandbox:    'EBWKjlELKMYqRNQ6sYvFo64FtaRLRR5BdHEESmha49TM',
                        production: 'EBWKjlELKMYqRNQ6sYvFo64FtaRLRR5BdHEESmha49TM'
                    },

                    payment: function() {
                        // Set up the payment here, when the buyer clicks on the button
                        console.log('-- payment --');

                        var env    = this.props.env;
                        var client = this.props.client;

                        return paypal.rest.payment.create(env, client, {
                            transactions: [
                                {
                                    amount: { total: '1.00', currency: 'USD' }
                                }
                            ]
                        });
                    },

                    onAuthorize: function(data, actions) {
                        // Execute the payment here, when the buyer approves the transaction
                        console.log('-- onAuthorize --');

                        return actions.payment.execute().then(function() {
                            // Show a success page to the buyer
                            console.log('-- onAuthorize success --');

                            //window.xchild.props.onComplete('Paypal succeeded!');

                            window.location.href = 'https://2e2d2a55.ngrok.io/register';

                        });
                    },

                    onCancel: function(data, actions) {
                        // Show a cancel page or return to cart
                        console.log('-- onCancel --');
                        window.xchild.props.onComplete('Paypal cancaled!');
                    },

                    onError: function(err) {
                        // Show an error page here, when an error occurs
                        console.log('-- onError --');
                        console.log(err);
                        window.xchild.props.onComplete('Paypal error!');
                    }

                }, '#paypal-button');
            </script>
        </div>
        </div>


        <!-- Apple Pay -->
        <div class="row">
        <div class="col-md-12">
            <button id="apple-pay-button"></button>
            <script type="text/javascript" src="https://js.stripe.com/v2/"></script>
            <script>
                Stripe.setPublishableKey('pk_test_6pRNASCoBOKtIshFeQd4XMUh');

                Stripe.applePay.checkAvailability(function(available) {

                    if (available) {
                        document.getElementById('apple-pay-button').style.display = 'block';
                    }
                });

                document.getElementById('apple-pay-button').addEventListener('click', beginApplePay);


                function beginApplePay() {
                    var paymentRequest = {
                        countryCode: 'US',
                        currencyCode: 'USD',
                        total: {
                            label: 'Stripe.com',
                            amount: '19.99'
                        }
                    };
                    var session = Stripe.applePay.buildSession(paymentRequest,
                        function(result, completion) {

                        $.post('/charges', { token: result.token.id }).done(function() {
                            completion(ApplePaySession.STATUS_SUCCESS);

                            window.xchild.props.onComplete('Apple Pay succeeded!');

                        }).fail(function() {
                            completion(ApplePaySession.STATUS_FAILURE);

                            window.xchild.props.onComplete('Apple Pay error!');
                            
                        });

                    }, function(error) {
                        console.log(error.message);
                    });

                    session.oncancel = function() {
                        console.log("User hit the cancel button in the payment window");
                        window.xchild.props.onComplete('Apple Pay canceled!');
                    };

                    session.begin();
                }
            </script>
        </div>
        </div>
    </div>








<form>
  <div class="form-group">
    <label for="exampleInputEmail1">Email address</label>
    <input type="email" class="form-control" id="exampleInputEmail1" placeholder="Email">
  </div>
  <div class="form-group">
    <label for="exampleInputPassword1">Password</label>
    <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password">
  </div>
  <div class="form-group">
    <label for="exampleInputFile">File input</label>
    <input type="file" id="exampleInputFile">
    <p class="help-block">Example block-level help text here.</p>
  </div>
  <div class="checkbox">
    <label>
      <input type="checkbox"> Check me out
    </label>
  </div>
  <button type="submit" class="btn btn-default">Submit</button>
</form>

<div class="checkbox">
  <label>
    <input type="checkbox" value="">
    Option one is this and that&mdash;be sure to include why it's great
  </label>
</div>
<div class="checkbox disabled">
  <label>
    <input type="checkbox" value="" disabled>
    Option two is disabled
  </label>
</div>

<div class="radio">
  <label>
    <input type="radio" name="optionsRadios" id="optionsRadios1" value="option1" checked>
    Option one is this and that&mdash;be sure to include why it's great
  </label>
</div>
<div class="radio">
  <label>
    <input type="radio" name="optionsRadios" id="optionsRadios2" value="option2">
    Option two can be something else and selecting it will deselect option one
  </label>
</div>
<div class="radio disabled">
  <label>
    <input type="radio" name="optionsRadios" id="optionsRadios3" value="option3" disabled>
    Option three is disabled
  </label>
</div>


<div class="form-group has-success">
  <label class="control-label" for="inputSuccess1">Input with success</label>
  <input type="text" class="form-control" id="inputSuccess1" aria-describedby="helpBlock2">
  <span id="helpBlock2" class="help-block">A block of help text that breaks onto a new line and may extend beyond one line.</span>
</div>
<div class="form-group has-warning">
  <label class="control-label" for="inputWarning1">Input with warning</label>
  <input type="text" class="form-control" id="inputWarning1">
</div>
<div class="form-group has-error">
  <label class="control-label" for="inputError1">Input with error</label>
  <input type="text" class="form-control" id="inputError1">
</div>
<div class="has-success">
  <div class="checkbox">
    <label>
      <input type="checkbox" id="checkboxSuccess" value="option1">
      Checkbox with success
    </label>
  </div>
</div>
<div class="has-warning">
  <div class="checkbox">
    <label>
      <input type="checkbox" id="checkboxWarning" value="option1">
      Checkbox with warning
    </label>
  </div>
</div>
<div class="has-error">
  <div class="checkbox">
    <label>
      <input type="checkbox" id="checkboxError" value="option1">
      Checkbox with error
    </label>
  </div>
</div>